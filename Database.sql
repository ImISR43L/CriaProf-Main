-- Tabela 1: profiles
-- Armazena dados públicos dos usuários, vinculados à tabela de autenticação.
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text NULL,
  updated_at timestamptz NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.profiles IS 'Stores public user data linked to the authentication table.';


-- Tabela 2: quizzes
-- Armazena as informações gerais de cada questionário criado.
CREATE TABLE public.quizzes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL DEFAULT auth.uid(),
  title text NOT NULL,
  grid_data jsonb NULL,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT quizzes_pkey PRIMARY KEY (id),
  CONSTRAINT quizzes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.quizzes IS 'Stores general information for each created quiz.';


-- Tabela 3: questions
-- Armazena cada pergunta individual, ligada a um questionário.
CREATE TABLE public.questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  quiz_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.questions IS 'Stores individual questions linked to a specific quiz.';


-- HABILITAR ROW LEVEL SECURITY (RLS) PARA TODAS AS TABELAS
-- Passo de segurança crucial para garantir que os dados sejam privados por padrão.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;

-- POLÍTICAS PARA A TABELA "PROFILES"
-- -----------------------------------------

-- 1. Permitir que usuários leiam seu próprio perfil.
CREATE POLICY "Users can view their own profile."
ON public.profiles FOR SELECT
USING (auth.uid() = id);

-- 2. Permitir que usuários atualizem seu próprio perfil.
CREATE POLICY "Users can update their own profile."
ON public.profiles FOR UPDATE
USING (auth.uid() = id);


-- POLÍTICAS PARA A TABELA "QUIZZES"
-- -----------------------------------------

-- 1. Permitir que usuários leiam (SELECT) seus próprios quizzes.
CREATE POLICY "Users can view their own quizzes."
ON public.quizzes FOR SELECT
USING (auth.uid() = user_id);

-- 2. Permitir que usuários criem (INSERT) quizzes.
-- A verificação `auth.uid() = user_id` garante que eles não possam criar um quiz em nome de outra pessoa.
CREATE POLICY "Users can create quizzes."
ON public.quizzes FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- 3. Permitir que usuários atualizem (UPDATE) seus próprios quizzes.
CREATE POLICY "Users can update their own quizzes."
ON public.quizzes FOR UPDATE
USING (auth.uid() = user_id);

-- 4. Permitir que usuários deletem (DELETE) seus próprios quizzes.
CREATE POLICY "Users can delete their own quizzes."
ON public.quizzes FOR DELETE
USING (auth.uid() = user_id);


-- POLÍTICAS PARA A TABELA "QUESTIONS"
-- -----------------------------------------
-- Para esta tabela, a segurança é baseada na posse do "quiz" pai.

-- 1. Permitir que usuários leiam as perguntas de seus próprios quizzes.
CREATE POLICY "Users can view questions of their own quizzes."
ON public.questions FOR SELECT
-- A sub-query verifica se o user_id do quiz correspondente é o mesmo do usuário logado.
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 2. Permitir que usuários criem perguntas em seus próprios quizzes.
CREATE POLICY "Users can create questions for their own quizzes."
ON public.questions FOR INSERT
WITH CHECK ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 3. Permitir que usuários atualizem as perguntas de seus próprios quizzes.
CREATE POLICY "Users can update questions of their own quizzes."
ON public.questions FOR UPDATE
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 4. Permitir que usuários deletem as perguntas de seus próprios quizzes.
CREATE POLICY "Users can delete questions of their own quizzes."
ON public.questions FOR DELETE
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

ALTER TABLE public.quizzes
ADD COLUMN grid_size smallint NOT NULL DEFAULT 15;

-- Tabela 1: templates
-- Armazena as informações gerais de cada template.
CREATE TABLE public.templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text NULL,
  grid_size smallint NOT NULL DEFAULT 15,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT templates_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.templates IS 'Stores pre-made activity templates.';

-- Tabela 2: template_questions
-- Armazena as perguntas de cada template.
CREATE TABLE public.template_questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  template_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT template_questions_pkey PRIMARY KEY (id),
  CONSTRAINT template_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.template_questions IS 'Stores the questions for each pre-made template.';

-- HABILITAR RLS
ALTER TABLE public.templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.template_questions ENABLE ROW LEVEL SECURITY;

-- CRIAR POLÍTICAS DE LEITURA PÚBLICA
-- Permite que qualquer pessoa (logada ou não) possa ver a lista de templates.
CREATE POLICY "Templates are viewable by everyone."
ON public.templates FOR SELECT
USING (true);

CREATE POLICY "Template questions are viewable by everyone."
ON public.template_questions FOR SELECT
USING (true);

-- Insere um template principal na tabela 'templates'
INSERT INTO public.templates (id, title, description, grid_size)
VALUES ('a1b2c3d4-e5f6-7890-1234-567890abcdef', 'Tabuada Divertida', 'Uma atividade simples para praticar a tabuada do 2 e do 3.', 10);

-- Insere as perguntas associadas a esse template
INSERT INTO public.template_questions (template_id, color, question_text, answer)
VALUES
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#28a745', '2 x 2', '4'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#28a745', '2 x 5', '10'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#ffc107', '3 x 3', '9'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#ffc107', '3 x 7', '21');

ALTER TABLE public.quizzes
ADD COLUMN is_public boolean NOT NULL DEFAULT false;

-- Remove a política de leitura antiga da tabela 'quizzes'
DROP POLICY "Users can view their own quizzes." ON public.quizzes;

-- Cria a nova política que permite leitura pelo dono OU se for público
CREATE POLICY "Users can view their own or public quizzes."
ON public.quizzes FOR SELECT
USING ( (auth.uid() = user_id) OR (is_public = true) );


-- Remove a política de leitura antiga da tabela 'questions'
DROP POLICY "Users can view questions of their own quizzes." ON public.questions;

-- Cria a nova política que permite leitura das perguntas de quizzes do dono OU públicos
CREATE POLICY "Users can view questions of own or public quizzes."
ON public.questions FOR SELECT
USING (
  (SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid()
  OR
  (SELECT is_public FROM public.quizzes WHERE id = questions.quiz_id) = true
);

-- Remove a política de leitura antiga e restritiva da tabela 'profiles'
DROP POLICY "Users can view their own profile." ON public.profiles;

-- Cria a nova política que permite que todos leiam os perfis
CREATE POLICY "Profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING (true);

-- Cria uma função que insere uma nova linha na tabela 'profiles'
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name)
  -- Tenta usar o nome completo dos metadados, se não houver, usa um nome genérico
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

-- Cria um gatilho que executa a função 'handle_new_user' sempre que um novo usuário é adicionado
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

  -- 1. Remover a constraint de chave estrangeira antiga que aponta para auth.users
ALTER TABLE public.quizzes
DROP CONSTRAINT quizzes_user_id_fkey;

-- 2. Adicionar a nova constraint que aponta diretamente para a tabela 'profiles'
-- Isso cria a relação explícita que a API precisa para fazer o join.
ALTER TABLE public.quizzes
ADD CONSTRAINT quizzes_user_id_fkey
FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

-- ========= INÍCIO DO SCRIPT DE CORREÇÃO =========

-- PASSO 1: Corrigir a relação da tabela 'quizzes'
-- Remove a relação antiga e incorreta com a tabela de usuários.
-- O "IF EXISTS" previne erros caso esta parte já tenha sido executada.
ALTER TABLE public.quizzes
DROP CONSTRAINT IF EXISTS quizzes_user_id_fkey;

-- Cria a nova relação, ligando 'quizzes' diretamente a 'profiles'.
-- Esta é a correção principal para a página da Comunidade.
ALTER TABLE public.quizzes
ADD CONSTRAINT quizzes_user_id_fkey
FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;


-- PASSO 2: Garantir que as políticas de leitura pública estão corretas
-- Remove políticas antigas para evitar conflitos e recria as corretas.
DROP POLICY IF EXISTS "Users can view their own or public quizzes." ON public.quizzes;
DROP POLICY IF EXISTS "Users can view their own quizzes." ON public.quizzes;
CREATE POLICY "Users can view their own or public quizzes."
ON public.quizzes FOR SELECT
USING ( (auth.uid() = user_id) OR (is_public = true) );

DROP POLICY IF EXISTS "Profiles are viewable by everyone." ON public.profiles;
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING (true);


-- PASSO 3: Garantir que o gatilho de criação de perfil existe
-- Este código cria a função e o gatilho que automatizam a criação de perfis para novos usuários.
-- O "CREATE OR REPLACE" garante que a versão mais recente seja usada.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- ========= FIM DO SCRIPT DE CORREÇÃO =========
CREATE OR REPLACE FUNCTION get_public_quizzes()
RETURNS TABLE (
  id uuid,
  title text,
  created_at timestamptz,
  author_name text
) AS $$
BEGIN
  RETURN QUERY
    SELECT
      q.id,
      q.title,
      q.created_at,
      p.full_name as author_name
    FROM
      public.quizzes as q
    LEFT JOIN
      public.profiles as p ON q.user_id = p.id
    WHERE
      q.is_public = true
    ORDER BY
      q.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- ========= PASSO 1: SCRIPT DE LIMPEZA SEGURO =========
-- Apaga as tabelas na ordem correta, usando IF EXISTS para evitar erros.
-- A opção CASCADE remove automaticamente políticas, gatilhos e funções dependentes.
DROP TABLE IF EXISTS public.questions CASCADE;
DROP TABLE IF EXISTS public.template_questions CASCADE;
DROP TABLE IF EXISTS public.quizzes CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.templates CASCADE;


-- ========= PASSO 2: SCRIPT DE CRIAÇÃO ORIGINAL =========
-- (Este é o conteúdo do seu ficheiro Database.sql)

-- Tabela 1: profiles
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text NULL,
  updated_at timestamptz NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.profiles IS 'Stores public user data linked to the authentication table.';

-- Tabela 2: quizzes
CREATE TABLE public.quizzes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  grid_data jsonb NULL,
  created_at timestamptz NULL DEFAULT now(),
  grid_size smallint NOT NULL DEFAULT 15,
  is_public boolean NOT NULL DEFAULT false,
  CONSTRAINT quizzes_pkey PRIMARY KEY (id),
  CONSTRAINT quizzes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.quizzes IS 'Stores general information for each created quiz.';

-- Tabela 3: questions
CREATE TABLE public.questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  quiz_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.questions IS 'Stores individual questions linked to a specific quiz.';

-- HABILITAR ROW LEVEL SECURITY (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;

-- POLÍTICAS PARA "PROFILES"
CREATE POLICY "Profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- POLÍTICAS PARA "QUIZZES"
CREATE POLICY "Users can view their own or public quizzes." ON public.quizzes FOR SELECT USING ( (auth.uid() = user_id) OR (is_public = true) );
CREATE POLICY "Users can create quizzes." ON public.quizzes FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own quizzes." ON public.quizzes FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own quizzes." ON public.quizzes FOR DELETE USING (auth.uid() = user_id);

-- POLÍTICAS PARA "QUESTIONS"
CREATE POLICY "Users can view questions of own or public quizzes." ON public.questions FOR SELECT USING ( (SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid() OR (SELECT is_public FROM public.quizzes WHERE id = questions.quiz_id) = true );
CREATE POLICY "Users can create questions for their own quizzes." ON public.questions FOR INSERT WITH CHECK ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());
CREATE POLICY "Users can update questions of their own quizzes." ON public.questions FOR UPDATE USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());
CREATE POLICY "Users can delete questions of their own quizzes." ON public.questions FOR DELETE USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- GATILHO PARA NOVOS UTILIZADORES
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name)
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- FUNÇÃO RPC PARA GALERIA PÚBLICA
CREATE OR REPLACE FUNCTION get_public_quizzes()
RETURNS TABLE (
  id uuid,
  title text,
  created_at timestamptz,
  author_name text
) AS $$
BEGIN
  RETURN QUERY
    SELECT
      q.id,
      q.title,
      q.created_at,
      p.full_name as author_name
    FROM
      public.quizzes as q
    LEFT JOIN
      public.profiles as p ON q.user_id = p.id
    WHERE
      q.is_public = true
    ORDER BY
      q.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- TABELAS DE TEMPLATES
CREATE TABLE public.templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text NULL,
  grid_size smallint NOT NULL DEFAULT 15,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT templates_pkey PRIMARY KEY (id)
);
ALTER TABLE public.templates ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Templates are viewable by everyone." ON public.templates FOR SELECT USING (true);

CREATE TABLE public.template_questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  template_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT template_questions_pkey PRIMARY KEY (id),
  CONSTRAINT template_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE
);
ALTER TABLE public.template_questions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Template questions are viewable by everyone." ON public.template_questions FOR SELECT USING (true);

-- PASSO 1: Adicionar a coluna para guardar a grelha na tabela de templates
ALTER TABLE public.templates
ADD COLUMN grid_data jsonb NULL;

-- PASSO 2: Apagar os templates antigos para recriá-los com a grelha
-- (É mais seguro do que tentar fazer UPDATE em múltiplas tabelas)
DELETE FROM public.templates WHERE id IN (
  '10101010-0001-0001-0001-000000000001',
  '15151515-0002-0002-0002-000000000002',
  '20202020-0003-0003-0003-000000000003'
);


-- PASSO 3: Inserir novamente os templates com os dados da grelha (grid_data)

-- Template 1: Foguete da Tabuada (10x10)
INSERT INTO public.templates (id, title, description, grid_size, grid_data)
VALUES (
  '10101010-0001-0001-0001-000000000001',
  'Foguete da Tabuada',
  'Pratique a tabuada do 7 e 8 para colorir um foguete e prepará-lo para o lançamento!',
  10,
  '["","","","","49","49","","","","","","","","49","56","56","49","","","","","","49","56","64","64","56","49","","","","72","56","64","64","56","72","","","40","72","56","64","64","56","72","40","","40","40","72","64","64","72","40","40","","","","","48","45","48","","","","","","","","48","45","48","","","","","","","63","48","45","48","63","","","","","63","63","63","63","63","63","",""]'::jsonb
);

-- Perguntas do Foguete
INSERT INTO public.template_questions (template_id, color, question_text, answer)
VALUES
  ('10101010-0001-0001-0001-000000000001', '{"name": "Vermelho", "value": "#FF0000"}', '7 x 7', '49'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Vermelho", "value": "#FF0000"}', '8 x 7', '56'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Laranja", "value": "#FFA500"}', '6 x 8', '48'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Laranja", "value": "#FFA500"}', '9 x 5', '45'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Cinzento", "value": "#808080"}', '8 x 8', '64'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Cinzento", "value": "#808080"}', '7 x 6', '42'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Prata", "value": "#C0C0C0"}', '9 x 8', '72'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Prata", "value": "#C0C0C0"}', '8 x 5', '40'),
  ('10101010-0001-0001-0001-000000000001', '{"name": "Azul Céu", "value": "#87CEEB"}', '7 x 9', '63');

-- Template 2: Pirâmide de Gizé (15x15)
INSERT INTO public.templates (id, title, description, grid_size, grid_data)
VALUES (
  '15151515-0002-0002-0002-000000000002',
  'Mistérios do Egito Antigo',
  'Responda perguntas sobre o Egito Antigo para revelar uma das grandes pirâmides.',
  15,
  '["Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Rá","Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Anúbis","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Hieróglifos","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Faraó","Faraó","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Faraó","Faraó","Faraó","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Faraó","Faraó","Faraó","Faraó","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Faraó","Faraó","Faraó","Faraó","Faraó","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Faraó","Faraó","Faraó","Faraó","Faraó","Faraó","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Mumificação","Mumificação","Mumificação","Mumificação","Mumificação","Mumificação","Mumificação","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Mumificação","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Mumificação","Hieróglifos","Nilo","Nilo","Nilo","Nilo","Hieróglifos","Mumificação","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Mumificação","Hieróglifos","Nilo","Nilo","Hieróglifos","Mumificação","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Mumificação","Hieróglifos","Nilo","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon","Tutancâmon"]'::jsonb
);

-- Perguntas da Pirâmide
INSERT INTO public.template_questions (template_id, color, question_text, answer)
VALUES
  ('15151515-0002-0002-0002-000000000002', '{"name": "Amarelo", "value": "#FFFF00"}', 'Como era chamada a escrita sagrada dos egípcios?', 'Hieróglifos'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Amarelo", "value": "#FFFF00"}', 'Qual o título dado ao governante do Egito Antigo?', 'Faraó'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Amarelo", "value": "#FFFF00"}', 'Processo de preservação dos corpos para a vida após a morte.', 'Mumificação'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Castanho", "value": "#A52A2A"}', 'Principal rio que garantia a sobrevivência da civilização egípcia.', 'Nilo'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Castanho", "value": "#A52A2A"}', 'Famoso faraó jovem cuja tumba foi descoberta em 1922.', 'Tutancâmon'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Azul Céu", "value": "#87CEEB"}', 'Deus dos mortos com cabeça de chacal.', 'Anúbis'),
  ('15151515-0002-0002-0002-000000000002', '{"name": "Azul Céu", "value": "#87CEEB"}', 'Deus do Sol, a principal divindade egípcia.', 'Rá');

-- Template 3: Hélice de DNA (20x20)
INSERT INTO public.templates (id, title, description, grid_size, grid_data)
VALUES (
  '20202020-0003-0003-0003-000000000003',
  'O Código da Vida: DNA',
  'Teste seus conhecimentos em genética para construir e colorir a molécula da vida.',
  20,
  '["","","","","","","Guanina","Dupla Hélice","Timina","","","","","","","","","","","","","","","","","Guanina","Dupla Hélice","Dupla Hélice","Timina","","","","","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","Uracila","Uracila","Timina","","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","Uracila","Uracila","Uracila","Timina","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","Códon","Uracila","Uracila","Códon","Timina","","","","","","","","","","Guanina","Dupla Hélice","Timina","Códon","Códon","Códon","Códon","Códon","Timina","","","","","","","","","","Guanina","Dupla Hélice","Timina","Desoxirribose","Códon","Códon","Desoxirribose","Timina","","","","","","","","","","Guanina","Dupla Hélice","Timina","Desoxirribose","Desoxirribose","Desoxirribose","Desoxirribose","Timina","","","","","","","","","","","","Timina","Dupla Hélice","Guanina","Desoxirribose","Desoxirribose","Guanina","","","","","","","","","","","","Timina","Dupla Hélice","Dupla Hélice","Guanina","Guanina","","","","","","","","","","","","Timina","Dupla Hélice","Guanina","Uracila","Uracila","Guanina","","","","","","","","","","","Timina","Dupla Hélice","Guanina","Uracila","Uracila","Uracila","Guanina","","","","","","","","","","Timina","Dupla Hélice","Guanina","Códon","Uracila","Uracila","Códon","Guanina","","","","","","","","","","Timina","Dupla Hélice","Guanina","Códon","Códon","Códon","Códon","Guanina","","","","","","","","","Timina","Dupla Hélice","Guanina","Desoxirribose","Códon","Códon","Desoxirribose","Guanina","","","","","","","","","Timina","Dupla Hélice","Guanina","Desoxirribose","Desoxirribose","Desoxirribose","Guanina","","","","","","","","","","Timina","Dupla Hélice","Dupla Hélice","Guanina","","","","","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","","","","","","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","","","","","","","","","","","","","","","","","","","Guanina","Dupla Hélice","Timina","","","","","","",""]'::jsonb
);

-- Perguntas do DNA
INSERT INTO public.template_questions (template_id, color, question_text, answer)
VALUES
  ('20202020-0003-0003-0003-000000000003', '{"name": "Azul", "value": "#0000FF"}', 'No DNA, a Adenina (A) sempre se pareia com a...', 'Timina'),
  ('20202020-0003-0003-0003-000000000003', '{"name": "Azul", "value": "#0000FF"}', 'Qual o nome do açúcar que compõe o DNA?', 'Desoxirribose'),
  ('20202020-0003-0003-0003-000000000003', '{"name": "Verde", "value": "#008000"}', 'No DNA, a Citosina (C) sempre se pareia com a...', 'Guanina'),
  ('20202020-0003-0003-0003-000000000003', '{"name": "Verde", "value": "#008000"}', 'O formato da molécula de DNA é conhecido como...', 'Dupla Hélice'),
  ('20202020-0003-0003-0003-000000000003', '{"name": "Vermelho", "value": "#FF0000"}', 'No RNA, qual base substitui a Timina?', 'Uracila'),
  ('20202020-0003-0003-0003-000000000003', '{"name": "Amarelo", "value": "#FFFF00"}', 'Uma sequência de três bases nitrogenadas que codifica um aminoácido é chamada de...', 'Códon');

  -- Adiciona uma coluna 'role' à tabela de perfis.
-- Por defeito, todos os novos utilizadores terão a função 'user'.
ALTER TABLE public.profiles
ADD COLUMN IF NOT EXISTS role TEXT DEFAULT 'user';

-- Cria uma função auxiliar para verificar se o utilizador atual é um administrador.
-- Isto simplifica a escrita das políticas de segurança.
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
  RETURN (
    SELECT role FROM public.profiles WHERE id = auth.uid()
  ) = 'admin';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Remove políticas de escrita antigas, se existirem.
DROP POLICY IF EXISTS "Admins can manage templates." ON public.templates;
DROP POLICY IF EXISTS "Admins can manage template questions." ON public.template_questions;

-- Aplica as novas políticas de segurança para a tabela 'templates'.
-- Apenas administradores podem criar, atualizar ou apagar templates.
CREATE POLICY "Admins can manage templates." ON public.templates
FOR ALL -- Aplica-se a INSERT, UPDATE, DELETE
USING (is_admin())
WITH CHECK (is_admin());

-- Aplica as novas políticas de segurança para a tabela 'template_questions'.
-- Apenas administradores podem gerir as perguntas dos templates.
CREATE POLICY "Admins can manage template questions." ON public.template_questions
FOR ALL -- Aplica-se a INSERT, UPDATE, DELETE
USING (is_admin())
WITH CHECK (is_admin());

-- 1. Cria a tabela para armazenar conteúdo editável do site.
CREATE TABLE IF NOT EXISTS public.site_content (
  page_key TEXT PRIMARY KEY,
  content_value TEXT NOT NULL
);

COMMENT ON TABLE public.site_content IS 'Stores editable text content for various site pages.';

-- 2. Ativa a Segurança a Nível de Linha (RLS).
ALTER TABLE public.site_content ENABLE ROW LEVEL SECURITY;

-- 3. Remove políticas antigas para garantir que as novas sejam aplicadas corretamente.
DROP POLICY IF EXISTS "Public can read site content." ON public.site_content;
DROP POLICY IF EXISTS "Admins can update site content." ON public.site_content;

-- 4. Cria políticas de acesso: Todos podem ler, mas apenas administradores podem atualizar.
CREATE POLICY "Public can read site content." ON public.site_content
FOR SELECT
USING (true);

CREATE POLICY "Admins can update site content." ON public.site_content
FOR UPDATE
USING (is_admin())
WITH CHECK (is_admin());

-- 5. Insere os dados iniciais das páginas (ou atualiza se já existirem).
-- A cláusula ON CONFLICT previne erros se o script for executado mais de uma vez.
INSERT INTO public.site_content (page_key, content_value) VALUES
  ('about_motivation', '[**Aqui você pode escrever sobre você e por que decidiu criar este projeto.** Fale sobre sua paixão por educação, programação, ou a necessidade que você identificou que o levou a desenvolver esta ferramenta.]'),
  ('contact_email', 'seu-email@exemplo.com'),
  ('contact_linkedin', 'linkedin.com/in/seu-perfil')
ON CONFLICT (page_key) DO UPDATE SET
  content_value = EXCLUDED.content_value;

  -- Remove a política antiga que só permitia UPDATE
DROP POLICY IF EXISTS "Admins can update site content." ON public.site_content;

-- Cria uma nova política mais abrangente que permite todas as ações de escrita (INSERT, UPDATE, DELETE)
-- para administradores na tabela de conteúdo do site.
CREATE POLICY "Admins can manage site content." ON public.site_content
FOR ALL   -- "ALL" inclui INSERT, UPDATE, e DELETE
USING (is_admin())
WITH CHECK (is_admin());

ALTER TABLE public.templates
ADD COLUMN disciplina TEXT;

-- 1. Remover a coluna "disciplina" que criámos anteriormente.
ALTER TABLE public.templates
DROP COLUMN IF EXISTS disciplina;

-- 2. Adicionar a nova coluna que irá ligar o template à sua categoria.
ALTER TABLE public.templates
ADD COLUMN IF NOT EXISTS category_id UUID REFERENCES public.template_categories(id);

-- ========= TABELA DE NOTÍCIAS (NEWS) =========

-- 1. Cria a tabela para os posts de notícias.
CREATE TABLE IF NOT EXISTS public.news_posts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  content TEXT,
  published_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.news_posts IS 'Stores individual news posts for the news page.';

-- 2. Ativa a Segurança (RLS) e define as permissões.
ALTER TABLE public.news_posts ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public can read news posts." ON public.news_posts;
DROP POLICY IF EXISTS "Admins can manage news posts." ON public.news_posts;

CREATE POLICY "Public can read news posts." ON public.news_posts FOR SELECT USING (true);
CREATE POLICY "Admins can manage news posts." ON public.news_posts FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- 3. Insere os posts de notícias que estão atualmente no código.
-- A cláusula ON CONFLICT evita duplicados se o script for executado mais de uma vez.
INSERT INTO public.news_posts (id, title, published_at, content) VALUES
  ('11111111-aaaa-bbbb-cccc-000000000001', 'Lançamento da Galeria da Comunidade!', '2025-10-05 00:00:00+00', 'É com grande entusiasmo que anunciamos o lançamento da Galeria da Comunidade! Agora, os professores podem partilhar as suas atividades com outros educadores, criando um grande repositório colaborativo de conhecimento. Explore a página da Comunidade hoje mesmo!'),
  ('11111111-aaaa-bbbb-cccc-000000000002', 'Novos Tamanhos de Grade Disponíveis', '2025-10-04 00:00:00+00', 'A pedido da comunidade, adicionámos a opção de criar atividades com diferentes tamanhos de grade. Agora pode escolher entre 10x10, 15x15 e 20x20 para adaptar as atividades a diferentes faixas etárias e complexidades.')
ON CONFLICT (id) DO NOTHING;


-- ========= TABELA DO ROADMAP =========

-- 1. Cria a tabela para os itens do roadmap.
CREATE TABLE IF NOT EXISTS public.roadmap_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  status TEXT NOT NULL, -- Ex: 'Concluído', 'Em Progresso', 'Planejado'
  order_index INT -- Para controlar a ordem de exibição
);
COMMENT ON TABLE public.roadmap_items IS 'Stores items for the project roadmap page.';

-- 2. Ativa a Segurança (RLS) e define as permissões.
ALTER TABLE public.roadmap_items ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public can read roadmap items." ON public.roadmap_items;
DROP POLICY IF EXISTS "Admins can manage roadmap items." ON public.roadmap_items;

CREATE POLICY "Public can read roadmap items." ON public.roadmap_items FOR SELECT USING (true);
CREATE POLICY "Admins can manage roadmap items." ON public.roadmap_items FOR ALL USING (is_admin()) WITH CHECK (is_admin());

-- 3. Insere os itens do roadmap que estão atualmente no código.
INSERT INTO public.roadmap_items (id, title, status, order_index) VALUES
  ('22222222-aaaa-bbbb-cccc-000000000001', 'Gerador de Atividades com Exportação para PDF', 'Concluído', 1),
  ('22222222-aaaa-bbbb-cccc-000000000002', 'Sistema de Contas de Utilizador (Login e Cadastro)', 'Concluído', 2),
  ('22222222-aaaa-bbbb-cccc-000000000003', 'Salvar e Carregar Questionários na Nuvem', 'Concluído', 3),
  ('22222222-aaaa-bbbb-cccc-000000000004', 'Tamanhos de Grade Variáveis (10x10, 15x15, 20x20)', 'Concluído', 4),
  ('22222222-aaaa-bbbb-cccc-000000000005', 'Galeria de Templates Pré-Prontos', 'Concluído', 5),
  ('22222222-aaaa-bbbb-cccc-000000000006', 'Galeria da Comunidade com Partilha de Quizzes', 'Concluído', 6),
  ('22222222-aaaa-bbbb-cccc-000000000007', 'Página de Perfil para Atualização de Nome', 'Concluído', 7),
  ('22222222-aaaa-bbbb-cccc-000000000008', 'Implementação de Melhorias Visuais (UX)', 'Em Progresso', 8),
  ('22222222-aaaa-bbbb-cccc-000000000009', 'Suporte para Múltiplos Idiomas', 'Planejado', 9)
ON CONFLICT (id) DO NOTHING;