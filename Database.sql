-- Tabela 1: profiles
-- Armazena dados públicos dos usuários, vinculados à tabela de autenticação.
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text NULL,
  updated_at timestamptz NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.profiles IS 'Stores public user data linked to the authentication table.';


-- Tabela 2: quizzes
-- Armazena as informações gerais de cada questionário criado.
CREATE TABLE public.quizzes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL DEFAULT auth.uid(),
  title text NOT NULL,
  grid_data jsonb NULL,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT quizzes_pkey PRIMARY KEY (id),
  CONSTRAINT quizzes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.quizzes IS 'Stores general information for each created quiz.';


-- Tabela 3: questions
-- Armazena cada pergunta individual, ligada a um questionário.
CREATE TABLE public.questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  quiz_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.questions IS 'Stores individual questions linked to a specific quiz.';


-- HABILITAR ROW LEVEL SECURITY (RLS) PARA TODAS AS TABELAS
-- Passo de segurança crucial para garantir que os dados sejam privados por padrão.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;

-- POLÍTICAS PARA A TABELA "PROFILES"
-- -----------------------------------------

-- 1. Permitir que usuários leiam seu próprio perfil.
CREATE POLICY "Users can view their own profile."
ON public.profiles FOR SELECT
USING (auth.uid() = id);

-- 2. Permitir que usuários atualizem seu próprio perfil.
CREATE POLICY "Users can update their own profile."
ON public.profiles FOR UPDATE
USING (auth.uid() = id);


-- POLÍTICAS PARA A TABELA "QUIZZES"
-- -----------------------------------------

-- 1. Permitir que usuários leiam (SELECT) seus próprios quizzes.
CREATE POLICY "Users can view their own quizzes."
ON public.quizzes FOR SELECT
USING (auth.uid() = user_id);

-- 2. Permitir que usuários criem (INSERT) quizzes.
-- A verificação `auth.uid() = user_id` garante que eles não possam criar um quiz em nome de outra pessoa.
CREATE POLICY "Users can create quizzes."
ON public.quizzes FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- 3. Permitir que usuários atualizem (UPDATE) seus próprios quizzes.
CREATE POLICY "Users can update their own quizzes."
ON public.quizzes FOR UPDATE
USING (auth.uid() = user_id);

-- 4. Permitir que usuários deletem (DELETE) seus próprios quizzes.
CREATE POLICY "Users can delete their own quizzes."
ON public.quizzes FOR DELETE
USING (auth.uid() = user_id);


-- POLÍTICAS PARA A TABELA "QUESTIONS"
-- -----------------------------------------
-- Para esta tabela, a segurança é baseada na posse do "quiz" pai.

-- 1. Permitir que usuários leiam as perguntas de seus próprios quizzes.
CREATE POLICY "Users can view questions of their own quizzes."
ON public.questions FOR SELECT
-- A sub-query verifica se o user_id do quiz correspondente é o mesmo do usuário logado.
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 2. Permitir que usuários criem perguntas em seus próprios quizzes.
CREATE POLICY "Users can create questions for their own quizzes."
ON public.questions FOR INSERT
WITH CHECK ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 3. Permitir que usuários atualizem as perguntas de seus próprios quizzes.
CREATE POLICY "Users can update questions of their own quizzes."
ON public.questions FOR UPDATE
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- 4. Permitir que usuários deletem as perguntas de seus próprios quizzes.
CREATE POLICY "Users can delete questions of their own quizzes."
ON public.questions FOR DELETE
USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

ALTER TABLE public.quizzes
ADD COLUMN grid_size smallint NOT NULL DEFAULT 15;

-- Tabela 1: templates
-- Armazena as informações gerais de cada template.
CREATE TABLE public.templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text NULL,
  grid_size smallint NOT NULL DEFAULT 15,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT templates_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.templates IS 'Stores pre-made activity templates.';

-- Tabela 2: template_questions
-- Armazena as perguntas de cada template.
CREATE TABLE public.template_questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  template_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT template_questions_pkey PRIMARY KEY (id),
  CONSTRAINT template_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.template_questions IS 'Stores the questions for each pre-made template.';

-- HABILITAR RLS
ALTER TABLE public.templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.template_questions ENABLE ROW LEVEL SECURITY;

-- CRIAR POLÍTICAS DE LEITURA PÚBLICA
-- Permite que qualquer pessoa (logada ou não) possa ver a lista de templates.
CREATE POLICY "Templates are viewable by everyone."
ON public.templates FOR SELECT
USING (true);

CREATE POLICY "Template questions are viewable by everyone."
ON public.template_questions FOR SELECT
USING (true);

-- Insere um template principal na tabela 'templates'
INSERT INTO public.templates (id, title, description, grid_size)
VALUES ('a1b2c3d4-e5f6-7890-1234-567890abcdef', 'Tabuada Divertida', 'Uma atividade simples para praticar a tabuada do 2 e do 3.', 10);

-- Insere as perguntas associadas a esse template
INSERT INTO public.template_questions (template_id, color, question_text, answer)
VALUES
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#28a745', '2 x 2', '4'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#28a745', '2 x 5', '10'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#ffc107', '3 x 3', '9'),
  ('a1b2c3d4-e5f6-7890-1234-567890abcdef', '#ffc107', '3 x 7', '21');

ALTER TABLE public.quizzes
ADD COLUMN is_public boolean NOT NULL DEFAULT false;

-- Remove a política de leitura antiga da tabela 'quizzes'
DROP POLICY "Users can view their own quizzes." ON public.quizzes;

-- Cria a nova política que permite leitura pelo dono OU se for público
CREATE POLICY "Users can view their own or public quizzes."
ON public.quizzes FOR SELECT
USING ( (auth.uid() = user_id) OR (is_public = true) );


-- Remove a política de leitura antiga da tabela 'questions'
DROP POLICY "Users can view questions of their own quizzes." ON public.questions;

-- Cria a nova política que permite leitura das perguntas de quizzes do dono OU públicos
CREATE POLICY "Users can view questions of own or public quizzes."
ON public.questions FOR SELECT
USING (
  (SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid()
  OR
  (SELECT is_public FROM public.quizzes WHERE id = questions.quiz_id) = true
);

-- Remove a política de leitura antiga e restritiva da tabela 'profiles'
DROP POLICY "Users can view their own profile." ON public.profiles;

-- Cria a nova política que permite que todos leiam os perfis
CREATE POLICY "Profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING (true);

-- Cria uma função que insere uma nova linha na tabela 'profiles'
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name)
  -- Tenta usar o nome completo dos metadados, se não houver, usa um nome genérico
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

-- Cria um gatilho que executa a função 'handle_new_user' sempre que um novo usuário é adicionado
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

  -- 1. Remover a constraint de chave estrangeira antiga que aponta para auth.users
ALTER TABLE public.quizzes
DROP CONSTRAINT quizzes_user_id_fkey;

-- 2. Adicionar a nova constraint que aponta diretamente para a tabela 'profiles'
-- Isso cria a relação explícita que a API precisa para fazer o join.
ALTER TABLE public.quizzes
ADD CONSTRAINT quizzes_user_id_fkey
FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

-- ========= INÍCIO DO SCRIPT DE CORREÇÃO =========

-- PASSO 1: Corrigir a relação da tabela 'quizzes'
-- Remove a relação antiga e incorreta com a tabela de usuários.
-- O "IF EXISTS" previne erros caso esta parte já tenha sido executada.
ALTER TABLE public.quizzes
DROP CONSTRAINT IF EXISTS quizzes_user_id_fkey;

-- Cria a nova relação, ligando 'quizzes' diretamente a 'profiles'.
-- Esta é a correção principal para a página da Comunidade.
ALTER TABLE public.quizzes
ADD CONSTRAINT quizzes_user_id_fkey
FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;


-- PASSO 2: Garantir que as políticas de leitura pública estão corretas
-- Remove políticas antigas para evitar conflitos e recria as corretas.
DROP POLICY IF EXISTS "Users can view their own or public quizzes." ON public.quizzes;
DROP POLICY IF EXISTS "Users can view their own quizzes." ON public.quizzes;
CREATE POLICY "Users can view their own or public quizzes."
ON public.quizzes FOR SELECT
USING ( (auth.uid() = user_id) OR (is_public = true) );

DROP POLICY IF EXISTS "Profiles are viewable by everyone." ON public.profiles;
DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING (true);


-- PASSO 3: Garantir que o gatilho de criação de perfil existe
-- Este código cria a função e o gatilho que automatizam a criação de perfis para novos usuários.
-- O "CREATE OR REPLACE" garante que a versão mais recente seja usada.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data->>'full_name');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- ========= FIM DO SCRIPT DE CORREÇÃO =========
CREATE OR REPLACE FUNCTION get_public_quizzes()
RETURNS TABLE (
  id uuid,
  title text,
  created_at timestamptz,
  author_name text
) AS $$
BEGIN
  RETURN QUERY
    SELECT
      q.id,
      q.title,
      q.created_at,
      p.full_name as author_name
    FROM
      public.quizzes as q
    LEFT JOIN
      public.profiles as p ON q.user_id = p.id
    WHERE
      q.is_public = true
    ORDER BY
      q.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- ========= PASSO 1: SCRIPT DE LIMPEZA SEGURO =========
-- Apaga as tabelas na ordem correta, usando IF EXISTS para evitar erros.
-- A opção CASCADE remove automaticamente políticas, gatilhos e funções dependentes.
DROP TABLE IF EXISTS public.questions CASCADE;
DROP TABLE IF EXISTS public.template_questions CASCADE;
DROP TABLE IF EXISTS public.quizzes CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.templates CASCADE;


-- ========= PASSO 2: SCRIPT DE CRIAÇÃO ORIGINAL =========
-- (Este é o conteúdo do seu ficheiro Database.sql)

-- Tabela 1: profiles
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  full_name text NULL,
  updated_at timestamptz NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.profiles IS 'Stores public user data linked to the authentication table.';

-- Tabela 2: quizzes
CREATE TABLE public.quizzes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  grid_data jsonb NULL,
  created_at timestamptz NULL DEFAULT now(),
  grid_size smallint NOT NULL DEFAULT 15,
  is_public boolean NOT NULL DEFAULT false,
  CONSTRAINT quizzes_pkey PRIMARY KEY (id),
  CONSTRAINT quizzes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.quizzes IS 'Stores general information for each created quiz.';

-- Tabela 3: questions
CREATE TABLE public.questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  quiz_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.questions IS 'Stores individual questions linked to a specific quiz.';

-- HABILITAR ROW LEVEL SECURITY (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;

-- POLÍTICAS PARA "PROFILES"
CREATE POLICY "Profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- POLÍTICAS PARA "QUIZZES"
CREATE POLICY "Users can view their own or public quizzes." ON public.quizzes FOR SELECT USING ( (auth.uid() = user_id) OR (is_public = true) );
CREATE POLICY "Users can create quizzes." ON public.quizzes FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own quizzes." ON public.quizzes FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own quizzes." ON public.quizzes FOR DELETE USING (auth.uid() = user_id);

-- POLÍTICAS PARA "QUESTIONS"
CREATE POLICY "Users can view questions of own or public quizzes." ON public.questions FOR SELECT USING ( (SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid() OR (SELECT is_public FROM public.quizzes WHERE id = questions.quiz_id) = true );
CREATE POLICY "Users can create questions for their own quizzes." ON public.questions FOR INSERT WITH CHECK ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());
CREATE POLICY "Users can update questions of their own quizzes." ON public.questions FOR UPDATE USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());
CREATE POLICY "Users can delete questions of their own quizzes." ON public.questions FOR DELETE USING ((SELECT user_id FROM public.quizzes WHERE id = questions.quiz_id) = auth.uid());

-- GATILHO PARA NOVOS UTILIZADORES
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name)
  values (new.id, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- FUNÇÃO RPC PARA GALERIA PÚBLICA
CREATE OR REPLACE FUNCTION get_public_quizzes()
RETURNS TABLE (
  id uuid,
  title text,
  created_at timestamptz,
  author_name text
) AS $$
BEGIN
  RETURN QUERY
    SELECT
      q.id,
      q.title,
      q.created_at,
      p.full_name as author_name
    FROM
      public.quizzes as q
    LEFT JOIN
      public.profiles as p ON q.user_id = p.id
    WHERE
      q.is_public = true
    ORDER BY
      q.created_at DESC;
END;
$$ LANGUAGE plpgsql;

-- TABELAS DE TEMPLATES
CREATE TABLE public.templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text NULL,
  grid_size smallint NOT NULL DEFAULT 15,
  created_at timestamptz NULL DEFAULT now(),
  CONSTRAINT templates_pkey PRIMARY KEY (id)
);
ALTER TABLE public.templates ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Templates are viewable by everyone." ON public.templates FOR SELECT USING (true);

CREATE TABLE public.template_questions (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  template_id uuid NOT NULL,
  color text NOT NULL,
  question_text text NOT NULL,
  answer text NOT NULL,
  CONSTRAINT template_questions_pkey PRIMARY KEY (id),
  CONSTRAINT template_questions_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.templates(id) ON DELETE CASCADE
);
ALTER TABLE public.template_questions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Template questions are viewable by everyone." ON public.template_questions FOR SELECT USING (true);